20171666 고재원입니다. 

언어 : c++
환경 : 윈도우, Visual Studio 2019

아직까지도 c의 사고방식에 사로잡혀 처음에는 c로 작성을 하였으나, 
동적 할당의 늪에서 빠져나오질 못하여 
교수님께서 열린게시판에 언급하였음에도 불구하고
부득이하게 c++로 작성하였습니다.
이번 방학을 통해 강해지겠습니다.... 
이번 과제를 하면서 많은 부끄러움, 나약함을 느꼈습니다. 

람다 식을 입력하면 SKI combinator에 대한 식으로 잘 출력되어 나옵니다. 

하지만 그러기 위해서는 입력의 방법을 달리해야 합니다. 

0. 띄어쓰기를 지원하지 않습니다. 저의 실력 부족입니다. ㅠㅠ
1. λ는 L로 표현 합니다.  예)  λx.x >> Lx.x
2. 변수는 따로 써야 합니다. 예) λ x y. x(xy) >> Lx.Ly.x(xy)
3. beta conversion을 시행하기 위해서 람다 식들이 ()에 둘러쌓여야 합니다. 
	예)  (/m n f x -> m f (n f x)) (/f x -> f x) (/f x -> f x),
	     (Lm.Ln.Lf.Lx.mf(nfx))(Lf.Lx.fx)(Lf.Lx.fx)

4. Combinator를 지원하지 않습니다. 무식하게 람다 식으로 표현해야 됩니다. 
이 글을 적을수록 부끄러움은 늘어만 갑니다...
	예) 3 FACT >> ERROR 


편한 검사를 위해 원래의 람다 식과 제가 제시한 방법으로 나타낸 람다 식을 몇 개 모아 둔
람다식.txt를 만들었습니다. 


식을 가슴이 아닌 눈으로 보라는 교수님의 말에 힌트를 얻어
식을 자르고 새로 만들어(SKI) 붙이는 방법으로 프로그램을 만들었습니다. 

중심 함수는 translate_S,K,I,  beta reduction함수들이며,
나머지 함수는 그저 위 함수들의 연산을 돕는 용도입니다. 

감사합니다. 

P.S.
안녕하세요 교수님. 교수님의 오토마타와 형식언어를 수강한 고재원입니다.
코로나로 인해 서로 얼굴 한 번 못 보고 오토마타 수업이 끝난 것이 매우 아쉽습니다. 
교수님의 수업은 정말 마음에 들었습니다. 배울수록 재미를 느끼게 되는 과목은 논리회로 
이후로 오랜만인 것 같습니다.  튜링 머신과 lambda calculus는 많이 어려웠지만, 
그래도 이러한 과제들을 풀면서 조금씩 이해할 수 있었습니다. 
오토마타 수업 때 배운 것을 기반으로 한 층 더 나은 공학자가 되겠습니다.
그동안 오토마타를 가르쳐주셔서 감사합니다 :)